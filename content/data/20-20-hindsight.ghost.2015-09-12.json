{"meta":{"exported_on":1442049878063,"version":"002"},"data":{"posts":[{"id":1,"uuid":"4a826ad9-7187-4933-ac46-81afe907235e","title":"Welcome to Ghost","slug":"welcome-to-ghost","markdown":"You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at `<your blog URL>/ghost/`. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!\n\n## Getting Started\n\nGhost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!\n\nWriting in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *shortcuts* to **style** your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n### Links\n\nWant to link to a source? No problem. If you paste in url, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](https://ghost.org/images/ghost.png)\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. It was probably very wisdomous. Is wisdomous a word? Find out in a future release when we introduce spellcheck! For now - it's definitely a word.\n\n> Wisdomous - it's definitely a word.\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can  write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)","html":"<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>\n\n<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Want to link to a source? No problem. If you paste in url, like <a href='http://ghost.org'>http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"https://ghost.org/images/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. It was probably very wisdomous. Is wisdomous a word? Find out in a future release when we introduce spellcheck! For now - it's definitely a word.</p>\n\n<blockquote>\n  <p>Wisdomous - it's definitely a word.</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>\n\n<pre><code>.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can  write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1390837998851,"created_by":1,"updated_at":1406030120989,"updated_by":1,"published_at":1390837998867,"published_by":1},{"id":2,"uuid":"f734cd4f-9d1f-4760-94a9-6cd554914928","title":"Everything but the kitchen async","slug":"everything-but-the-kitchen-async","markdown":"For the past few weeks I have been researching async in C# 5.0 and I have a few things I would like to share. \n\nRecently I read a book by Alex Davies [Async in C# 5.0](http://www.amazon.com/Async-C-5-0-Alex-Davies/dp/1449337163). It introduced the concept of async as a CafÃ© and this has stuck with me. The analogy really goes a long way in explaining how async works, but was largely academic in the text. I plan on fleshing this out with concrete examples as well as including other things I have picked up along the way.\n\n## The Menu\n* Introducing the Kitchen\n* Kettles vs Carrots\n* The many chefs\n* The attentive waiter\n* Cancelling orders\n\n\n## Introducing the Kitchen\nIn this intro I am going to dive right in and show you the differences between synchronous and asynchronous execution in C#. I will be expanding on a number of the topics as we go along, but if you feel I have missed or glossed over something please let me know in the comments. \n\n#### Mise en place\nThe async and await keywords were introduced in C# 5.0 which shipped with .NET 4.5. To get started you are going to need to prepare the following:\n\n* Visual Studio 2013 ([Express Version](http://www.visualstudio.com/en-us/downloads/download-visual-studio-vs#DownloadFamilies_2) is free if you don't have it)\n * Installing ([.NET 4.5+]()) on top of VS2012 will work too.\n* Source from [Github](https://github.com/chrisfraser/AsyncKitchenIntro)\n\n#### Sales pitch\nIf you are reading this because you are motivating to use C# 5.0 async and await in a new project, I am going to tl;dr this and make your life easy. Take a deep breath.\n\n> Async allows you to have fast, fluid and responsive UI in your client or greater throughput on your web server with the same resources, while maintaining a code structure and paradigm very similar to that of synchronous code. \n\nEverything, down to your cellphone, has multiple cores these days. There is no longer any excuse for not using async to take advantage of the current hardware architecture. With a little help from our two chefs I am going to show you how this works.\n\n#### The kitchen\nThis kitchen is unreasonable and makes a single dish: Tea and baked carrots. Trust me, it is delicious.\n\nHere are the rules:\n\n* The chef has to make tea\n* The chef has to make baked carrots\n* After making both he can serve them\n\n#### The synchronous chef\nThe synchronous chef is a single minded bloke. Methodical is his mantra. He starts off making tea which requires some boiling water. So he turns on the kettle, and watches it while it boils, then makes the tea. He then chops the carrots and puts them in the oven to bake and serves it all when the carrots are perfectly done.\n\n```language-csharp\npublic class Chef\n{\n    public string MakeTeaAndCarrots()\n    {\n        string tea = MakeTea();\n        string bakedCarrots = MakeBakeCarrots();\n\n        string dish = Serve(tea, bakedCarrots);\n\n        return dish;\n    }\n\n    private string MakeTea()\n    {\n        BoilKettle();\n\n        // Making tea\n        Thread.Sleep(500);\n\n        return \"tea\";\n    }\n\n    private void BoilKettle()\n    {\n        // Boiling kettle\n        Thread.Sleep(1000);\n    }\n\n    private string MakeBakeCarrots()\n    {\n        ChopCarrots();\n\n        // Baking carrots\n        Thread.Sleep(1500);\n\n        return \"baked carrots\";\n    }\n\n    private void ChopCarrots()\n    {\n        // Chopping carrots\n        Thread.Sleep(500);\n    }\n\n    private string Serve(string tea, string bakedCarrots)\n    {\n        Thread.Sleep(500);\n\n        return String.Format(\"Cold {0} and tasty {1}\", tea, bakedCarrots);\n    }\n}\n```\n\nHere is the output of the GitHub code on my machine. It has some extra logging and timing in it so we can see how long things took to happen.\n\n![Sync chef output](/content/images/2014/Jul/Sync-chef-output.png#left)\n\nThis gets the job done, but customers are complaining about slow service and cold tea. It also does not feel like the way I would do this in my kitchen. Let's see if the asynchronous chef does any better.\n\n#### The asynchronous chef\nThe asynchronous chef is all about getting the job done as efficiently as possible. He does things a little differently. He starts off making tea which requires some boiling water. So he turns on the kettle, then immediately starts to chop the carrots. When the carrots are chopped he puts them in the oven. When the kettle has boiled he makes the tea. Then he serves it all when the carrots are perfectly done.\n\n```language-csharp\npublic class AsyncChef\n{\n    public async Task<string> MakeTeaAndCarrotsAsync()\n    {\n        Task<string> makeTea = MakeTea();\n        Task<string> bakeCarrots = MakeBakedCarrots();\n\n        string dish = Serve(await makeTea, await bakeCarrots);\n\n        return dish;\n    }\n\n    private async Task<string> MakeTea()\n    {\n        await BoilKettle();\n\n        // Making tea\n        Thread.Sleep(500);\n\n        return \"tea\";\n    }\n\n    private async Task BoilKettle()\n    {\n        // Boiling kettle\n        await Task.Delay(1000);\n    }\n\n    private async Task<string> MakeBakedCarrots()\n    {\n        ChopCarrots();\n\n        // Baking carrots\n        await Task.Delay(1500);\n\n        return \"baked carrots\";\n    }\n\n    private void ChopCarrots()\n    {\n        // Chopping carrots\n        Thread.Sleep(500);\n    }\n\n    private string Serve(string tea, string bakedCarrots)\n    {\n        // Serving\n        Thread.Sleep(500);\n\n        return String.Format(\"Hot {0} and tasty {1}\", tea, bakedCarrots);\n    }\n}\n```\nHere is the output.\n\n![Async chef output](/content/images/2014/Jul/Async-chef-output.png#left)\n\nThis is a lot better. The customers got their food quicker with hot tea. This also feels a lot more like the way I would make tea and carrots.\n\n#### Discussion\nYou will notice that the code in the two samples is very similar. There are a few extra async and await keywords as well as a Task class in the async version, but it reads very much like the synchronous one. C# 5.0 goes a long way to make it easy to write async code.\n\nIn the AsyncChef you will see `Task.Delay()` substituted for `Thread.Sleep()` when boiling the kettle and baking the carrots. These represent two different types of work in C#. They can be broadly categorized as work you need to do and work you can watch someone else do, if you choose to. Both the kettle and the oven represent work you can watch and need some way of signalling to the chef that they are finished if we want to use them asynchronously. The two types of work, Task class and signalling mechanisms will be dealt with in the next instalment in this series, **Kettles vs Carrots**. If you don't know what a Task is, think of it as a promise to return a result in the future for now.\n\nIf you haven't guessed it already, my two chefs are analogous to a thread. There is a common misconception that async means multi-threaded, but this is not true. The two ideas are complementary, but can happily exist independently. In the above examples there is only one<sup>1</sup> thread executing the code. The difference is that the asynchronous chef is able to continue with other work while the kettle is boiling or oven baking. This is the key to asynchrony, your thread is able to do useful work while waiting on other, long running, work out of its control. When the long running work is finished, there is magic that happens under the covers to ensure that your code resumes on the right thread.\n\n#### What magic is this?\nFirst off, async and await are a C# language feature. The CLR knows nothing about it. This means that everything involved in getting your asynchronous code to look, feel and behave like synchronous code is happening in the compiler. There is no functionality in the CLR to pause and resume a method so this is achieved by creating a state machine. In simple cases the state machine magic is easy to understand, but for more complex examples like nesting or using statements it is truly magical. There is a fantastic [talk](http://channel9.msdn.com/Events/TechDays/Techdays-2014-the-Netherlands/Async-programming-deep-dive) by Bart De Smet explaining how this works in detail.\n\nVery basically your method is chopped up into as many parts as you have await statements, plus one. A state machine tracks which part is to be executed next. Every time an await keyword is hit a continuation is registered to execute the next part of your method when the previous part is complete.\n\nEach time an await expression is hit in your async methods a number of actions are preformed:\n\n1.  A check is done to see if the Task you are awaiting is already complete. \n * If it is complete the method will continue synchronously.\n2.  The current SynchronizationContext is captured.\n3.  Everything required to continue the method is bundled into an object and stored on the heap.\n4.  A continuation is registered on completion of the awaited Task<sup>2</sup> to continue the state machine.\n5.  The tread is released and control is returned to the calling method.\n6.  When the awaited Task is complete the state machine is invoked again to continue the method.\n7.  If the SynchronizationContext captured in 2. is not null it is used to ensure that the continuation is marshalled onto the original thread. If it is null the current task scheduler is used. This is probably the default so the remainder of your method will execute on a thread pool thread.\n8.  The result of the Task is coerced. If it is a Task<T> the await expression will return a result of T if no exceptions were thrown.\n9. If any exceptions were thrown during execution the first will be coerced and re-thrown upon evaluation of the await expression.\n\nConsider setting yourself some breakpoints before and after await keywords and stepping through the code in the AsyncChef. This will give you a much better understanding of how the async code flows.\n\n\n#### Summary\nC# 5.0 async and await make code such as the following very easy to write. Syntactically it is very similar to synchronous code. This flattens the learning curve tremendously for people wanting to start learning and doing things asynchronously. The benefits are huge in many cases. Most noticeably when you are doing things analogous to watching a kettle boil. \n\n```language-csharp\npublic async Task<bool> IsWordOnPage(string url, string word)\n{\n    using (var client = new WebClient()) // No troubles with the using scope\n    {\n        string page = string.Empty;\n\n        try // Exception handling just like you're used to\n        {\n        \t// No messy callbacks or marshalling await evaluates here just \n            // like any other expression when the download is done\n            page = await client.DownloadStringTaskAsync(url);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e);\n        }\n        \n        return page.Contains(word); // Anyone awaiting this will receive a bool when complete\n    }\n}\n```\n\n\nI hope my chefs have helped to explain async in a tangible way. If you have any questions I would be happy to answer them in the comments below. Next time you see a kettle boiling in your applications, go on, make it async. What are you awaiting<sup>3</sup> for?\n\n---\n<small><sup>1</sup> A console application has no SynchronizationContext so the rest of the async method will fire using the default scheduler on a thread pool thread. This means that the continuation will probably fire on another thread. I have used a clever library called [Nito.AsyncEx](http://www.nuget.org/packages/Nito.AsyncEx) to create a SyncContext for the console app and force a single thread.</small>\n\n<small><sup>2</sup> This does not actually have to be a Task. All something needs to be awaitable is a method GetAwaiter() which returns a class implementing INotifyCompletion.</small>\n\n<small><sup>3</sup> I'm sorry, but I had to.</small>","html":"<p>For the past few weeks I have been researching async in C# 5.0 and I have a few things I would like to share. </p>\n\n<p>Recently I read a book by Alex Davies <a href=\"http://www.amazon.com/Async-C-5-0-Alex-Davies/dp/1449337163\">Async in C# 5.0</a>. It introduced the concept of async as a CafÃ© and this has stuck with me. The analogy really goes a long way in explaining how async works, but was largely academic in the text. I plan on fleshing this out with concrete examples as well as including other things I have picked up along the way.</p>\n\n<h2 id=\"themenu\">The Menu</h2>\n\n<ul>\n<li>Introducing the Kitchen</li>\n<li>Kettles vs Carrots</li>\n<li>The many chefs</li>\n<li>The attentive waiter</li>\n<li>Cancelling orders</li>\n</ul>\n\n<h2 id=\"introducingthekitchen\">Introducing the Kitchen</h2>\n\n<p>In this intro I am going to dive right in and show you the differences between synchronous and asynchronous execution in C#. I will be expanding on a number of the topics as we go along, but if you feel I have missed or glossed over something please let me know in the comments. </p>\n\n<h4 id=\"miseenplace\">Mise en place</h4>\n\n<p>The async and await keywords were introduced in C# 5.0 which shipped with .NET 4.5. To get started you are going to need to prepare the following:</p>\n\n<ul>\n<li>Visual Studio 2013 (<a href=\"http://www.visualstudio.com/en-us/downloads/download-visual-studio-vs#DownloadFamilies_2\">Express Version</a> is free if you don't have it)\n<ul><li>Installing (<a href=\"\">.NET 4.5+</a>) on top of VS2012 will work too.</li></ul></li>\n<li>Source from <a href=\"https://github.com/chrisfraser/AsyncKitchenIntro\">Github</a></li>\n</ul>\n\n<h4 id=\"salespitch\">Sales pitch</h4>\n\n<p>If you are reading this because you are motivating to use C# 5.0 async and await in a new project, I am going to tl;dr this and make your life easy. Take a deep breath.</p>\n\n<blockquote>\n  <p>Async allows you to have fast, fluid and responsive UI in your client or greater throughput on your web server with the same resources, while maintaining a code structure and paradigm very similar to that of synchronous code. </p>\n</blockquote>\n\n<p>Everything, down to your cellphone, has multiple cores these days. There is no longer any excuse for not using async to take advantage of the current hardware architecture. With a little help from our two chefs I am going to show you how this works.</p>\n\n<h4 id=\"thekitchen\">The kitchen</h4>\n\n<p>This kitchen is unreasonable and makes a single dish: Tea and baked carrots. Trust me, it is delicious.</p>\n\n<p>Here are the rules:</p>\n\n<ul>\n<li>The chef has to make tea</li>\n<li>The chef has to make baked carrots</li>\n<li>After making both he can serve them</li>\n</ul>\n\n<h4 id=\"thesynchronouschef\">The synchronous chef</h4>\n\n<p>The synchronous chef is a single minded bloke. Methodical is his mantra. He starts off making tea which requires some boiling water. So he turns on the kettle, and watches it while it boils, then makes the tea. He then chops the carrots and puts them in the oven to bake and serves it all when the carrots are perfectly done.</p>\n\n<pre><code class=\"language-csharp\">public class Chef  \n{\n    public string MakeTeaAndCarrots()\n    {\n        string tea = MakeTea();\n        string bakedCarrots = MakeBakeCarrots();\n\n        string dish = Serve(tea, bakedCarrots);\n\n        return dish;\n    }\n\n    private string MakeTea()\n    {\n        BoilKettle();\n\n        // Making tea\n        Thread.Sleep(500);\n\n        return \"tea\";\n    }\n\n    private void BoilKettle()\n    {\n        // Boiling kettle\n        Thread.Sleep(1000);\n    }\n\n    private string MakeBakeCarrots()\n    {\n        ChopCarrots();\n\n        // Baking carrots\n        Thread.Sleep(1500);\n\n        return \"baked carrots\";\n    }\n\n    private void ChopCarrots()\n    {\n        // Chopping carrots\n        Thread.Sleep(500);\n    }\n\n    private string Serve(string tea, string bakedCarrots)\n    {\n        Thread.Sleep(500);\n\n        return String.Format(\"Cold {0} and tasty {1}\", tea, bakedCarrots);\n    }\n}\n</code></pre>\n\n<p>Here is the output of the GitHub code on my machine. It has some extra logging and timing in it so we can see how long things took to happen.</p>\n\n<p><img src=\"/content/images/2014/Jul/Sync-chef-output.png#left\" alt=\"Sync chef output\" /></p>\n\n<p>This gets the job done, but customers are complaining about slow service and cold tea. It also does not feel like the way I would do this in my kitchen. Let's see if the asynchronous chef does any better.</p>\n\n<h4 id=\"theasynchronouschef\">The asynchronous chef</h4>\n\n<p>The asynchronous chef is all about getting the job done as efficiently as possible. He does things a little differently. He starts off making tea which requires some boiling water. So he turns on the kettle, then immediately starts to chop the carrots. When the carrots are chopped he puts them in the oven. When the kettle has boiled he makes the tea. Then he serves it all when the carrots are perfectly done.</p>\n\n<pre><code class=\"language-csharp\">public class AsyncChef  \n{\n    public async Task&lt;string&gt; MakeTeaAndCarrotsAsync()\n    {\n        Task&lt;string&gt; makeTea = MakeTea();\n        Task&lt;string&gt; bakeCarrots = MakeBakedCarrots();\n\n        string dish = Serve(await makeTea, await bakeCarrots);\n\n        return dish;\n    }\n\n    private async Task&lt;string&gt; MakeTea()\n    {\n        await BoilKettle();\n\n        // Making tea\n        Thread.Sleep(500);\n\n        return \"tea\";\n    }\n\n    private async Task BoilKettle()\n    {\n        // Boiling kettle\n        await Task.Delay(1000);\n    }\n\n    private async Task&lt;string&gt; MakeBakedCarrots()\n    {\n        ChopCarrots();\n\n        // Baking carrots\n        await Task.Delay(1500);\n\n        return \"baked carrots\";\n    }\n\n    private void ChopCarrots()\n    {\n        // Chopping carrots\n        Thread.Sleep(500);\n    }\n\n    private string Serve(string tea, string bakedCarrots)\n    {\n        // Serving\n        Thread.Sleep(500);\n\n        return String.Format(\"Hot {0} and tasty {1}\", tea, bakedCarrots);\n    }\n}\n</code></pre>\n\n<p>Here is the output.</p>\n\n<p><img src=\"/content/images/2014/Jul/Async-chef-output.png#left\" alt=\"Async chef output\" /></p>\n\n<p>This is a lot better. The customers got their food quicker with hot tea. This also feels a lot more like the way I would make tea and carrots.</p>\n\n<h4 id=\"discussion\">Discussion</h4>\n\n<p>You will notice that the code in the two samples is very similar. There are a few extra async and await keywords as well as a Task class in the async version, but it reads very much like the synchronous one. C# 5.0 goes a long way to make it easy to write async code.</p>\n\n<p>In the AsyncChef you will see <code>Task.Delay()</code> substituted for <code>Thread.Sleep()</code> when boiling the kettle and baking the carrots. These represent two different types of work in C#. They can be broadly categorized as work you need to do and work you can watch someone else do, if you choose to. Both the kettle and the oven represent work you can watch and need some way of signalling to the chef that they are finished if we want to use them asynchronously. The two types of work, Task class and signalling mechanisms will be dealt with in the next instalment in this series, <strong>Kettles vs Carrots</strong>. If you don't know what a Task is, think of it as a promise to return a result in the future for now.</p>\n\n<p>If you haven't guessed it already, my two chefs are analogous to a thread. There is a common misconception that async means multi-threaded, but this is not true. The two ideas are complementary, but can happily exist independently. In the above examples there is only one<sup>1</sup> thread executing the code. The difference is that the asynchronous chef is able to continue with other work while the kettle is boiling or oven baking. This is the key to asynchrony, your thread is able to do useful work while waiting on other, long running, work out of its control. When the long running work is finished, there is magic that happens under the covers to ensure that your code resumes on the right thread.</p>\n\n<h4 id=\"whatmagicisthis\">What magic is this?</h4>\n\n<p>First off, async and await are a C# language feature. The CLR knows nothing about it. This means that everything involved in getting your asynchronous code to look, feel and behave like synchronous code is happening in the compiler. There is no functionality in the CLR to pause and resume a method so this is achieved by creating a state machine. In simple cases the state machine magic is easy to understand, but for more complex examples like nesting or using statements it is truly magical. There is a fantastic <a href=\"http://channel9.msdn.com/Events/TechDays/Techdays-2014-the-Netherlands/Async-programming-deep-dive\">talk</a> by Bart De Smet explaining how this works in detail.</p>\n\n<p>Very basically your method is chopped up into as many parts as you have await statements, plus one. A state machine tracks which part is to be executed next. Every time an await keyword is hit a continuation is registered to execute the next part of your method when the previous part is complete.</p>\n\n<p>Each time an await expression is hit in your async methods a number of actions are preformed:</p>\n\n<ol>\n<li>A check is done to see if the Task you are awaiting is already complete. <br />\n<ul><li>If it is complete the method will continue synchronously.</li></ul></li>\n<li>The current SynchronizationContext is captured.  </li>\n<li>Everything required to continue the method is bundled into an object and stored on the heap.  </li>\n<li>A continuation is registered on completion of the awaited Task<sup>2</sup> to continue the state machine.  </li>\n<li>The tread is released and control is returned to the calling method.  </li>\n<li>When the awaited Task is complete the state machine is invoked again to continue the method.  </li>\n<li>If the SynchronizationContext captured in 2. is not null it is used to ensure that the continuation is marshalled onto the original thread. If it is null the current task scheduler is used. This is probably the default so the remainder of your method will execute on a thread pool thread.  </li>\n<li>The result of the Task is coerced. If it is a Task<T> the await expression will return a result of T if no exceptions were thrown.  </li>\n<li>If any exceptions were thrown during execution the first will be coerced and re-thrown upon evaluation of the await expression.</li>\n</ol>\n\n<p>Consider setting yourself some breakpoints before and after await keywords and stepping through the code in the AsyncChef. This will give you a much better understanding of how the async code flows.</p>\n\n<h4 id=\"summary\">Summary</h4>\n\n<p>C# 5.0 async and await make code such as the following very easy to write. Syntactically it is very similar to synchronous code. This flattens the learning curve tremendously for people wanting to start learning and doing things asynchronously. The benefits are huge in many cases. Most noticeably when you are doing things analogous to watching a kettle boil. </p>\n\n<pre><code class=\"language-csharp\">public async Task&lt;bool&gt; IsWordOnPage(string url, string word)  \n{\n    using (var client = new WebClient()) // No troubles with the using scope\n    {\n        string page = string.Empty;\n\n        try // Exception handling just like you're used to\n        {\n            // No messy callbacks or marshalling await evaluates here just \n            // like any other expression when the download is done\n            page = await client.DownloadStringTaskAsync(url);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e);\n        }\n\n        return page.Contains(word); // Anyone awaiting this will receive a bool when complete\n    }\n}\n</code></pre>\n\n<p>I hope my chefs have helped to explain async in a tangible way. If you have any questions I would be happy to answer them in the comments below. Next time you see a kettle boiling in your applications, go on, make it async. What are you awaiting<sup>3</sup> for?</p>\n\n<hr />\n\n<p><small><sup>1</sup> A console application has no SynchronizationContext so the rest of the async method will fire using the default scheduler on a thread pool thread. This means that the continuation will probably fire on another thread. I have used a clever library called <a href=\"http://www.nuget.org/packages/Nito.AsyncEx\">Nito.AsyncEx</a> to create a SyncContext for the console app and force a single thread.</small></p>\n\n<p><small><sup>2</sup> This does not actually have to be a Task. All something needs to be awaitable is a method GetAwaiter() which returns a class implementing INotifyCompletion.</small></p>\n\n<p><small><sup>3</sup> I'm sorry, but I had to.</small></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1404418391063,"created_by":1,"updated_at":1407788295643,"updated_by":1,"published_at":1407788160000,"published_by":1},{"id":3,"uuid":"95db9be7-2771-43b5-baa1-740ec444415a","title":"hg (Mercurial) forget files matched in .hgignore","slug":"hg-mercurial-forget-files-matched-in-hgignore","markdown":"In my world a lot of source controlling gets done using [Mercurial](http://mercurial.selenic.com/). It is a free, distributed source control management tool also known as hg (The symbol for the element [mercury](http://en.wikipedia.org/wiki/Mercury_(element))).  Quickstart [here](http://mercurial.selenic.com/quickstart/). It also has a nice GUI tool [TortoiseHg](http://tortoisehg.bitbucket.org/) that includes shell integration.\n\nHg has a useful ignore file ([.hgignore](http://mercurial.selenic.com/wiki/.hgignore)) which sits at the root of your repository and specifies what files to ignore. You add either a Unix style pattern matcher or a regex expression, and they are faithfully ignored moving forward. This works great if you know about everything you need to ignore from the outset. The .hgignore entries do not, however, work retrospectively. If a file is added to a previous commit and then an ignore entry is added that matches it, it is not magically removed. Going through the repo and forgetting or removing these files is a pain. Fortunately there is a great feature in hg that can help speed this up by specifying [file sets](http://www.selenic.com/hg/help/filesets). This allows you to use the following code:\n\n`hg forget \"set:hgignore() and not ignored()\"`\n\nWhat this achieves is forgetting the set of files matched in .hgignore that are not yet ignored. The âforgetâ verb will forget the specified file in the repo, but not delete it from the file system. If you would like it deleted too, you can run:\n\n`hg remove \"set:hgignore() and not ignored()\"`\n\nHappy coding.","html":"<p>In my world a lot of source controlling gets done using <a href=\"http://mercurial.selenic.com/\">Mercurial</a>. It is a free, distributed source control management tool also known as hg (The symbol for the element <a href=\"http://en.wikipedia.org/wiki/Mercury_(element)\">mercury</a>).  Quickstart <a href=\"http://mercurial.selenic.com/quickstart/\">here</a>. It also has a nice GUI tool <a href=\"http://tortoisehg.bitbucket.org/\">TortoiseHg</a> that includes shell integration.</p>\n\n<p>Hg has a useful ignore file (<a href=\"http://mercurial.selenic.com/wiki/.hgignore\">.hgignore</a>) which sits at the root of your repository and specifies what files to ignore. You add either a Unix style pattern matcher or a regex expression, and they are faithfully ignored moving forward. This works great if you know about everything you need to ignore from the outset. The .hgignore entries do not, however, work retrospectively. If a file is added to a previous commit and then an ignore entry is added that matches it, it is not magically removed. Going through the repo and forgetting or removing these files is a pain. Fortunately there is a great feature in hg that can help speed this up by specifying <a href=\"http://www.selenic.com/hg/help/filesets\">file sets</a>. This allows you to use the following code:</p>\n\n<p><code>hg forget \"set:hgignore() and not ignored()\"</code></p>\n\n<p>What this achieves is forgetting the set of files matched in .hgignore that are not yet ignored. The âforgetâ verb will forget the specified file in the repo, but not delete it from the file system. If you would like it deleted too, you can run:</p>\n\n<p><code>hg remove \"set:hgignore() and not ignored()\"</code></p>\n\n<p>Happy coding.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1404456294472,"created_by":1,"updated_at":1404635424911,"updated_by":1,"published_at":1404457721295,"published_by":1},{"id":4,"uuid":"3ce77f86-a5ea-4d11-becf-e99a1d91b4cf","title":"About","slug":"about","markdown":"###Purpose\n\nAlthough I graduated as a  Chemical Engineer I have always had an interest in computers and programming. I have slowly taught myself the ins and outs of C# and ASP.Net. I have got to a point now where I think I know enough to be helpful to others.\n\nThis blog is a chronicle of some things I wish people had sat me down and taught me about before I spent hours failing. I will add posts about things that I fight with and issues I face. I will also try to remember things that got me in the beginning and share those too.\n\n###About Me\nI am a Chemical Engineer on paper, but my love affair with computers started way back round 1995. My dad had brought home a brand new 486. I don't recall the specs, but I do remember it being the envy of all my friends at the time. I have always had a strong compulsion to dismantle everything to see how it works; the myriad components and maze of green tracks held me in awe.\n\nI am now striving to master my craft and become a programming ninja. I have chosen to focus mainly on Microsoft technologies.","html":"<h3 id=\"purpose\">Purpose</h3>\n\n<p>Although I graduated as a  Chemical Engineer I have always had an interest in computers and programming. I have slowly taught myself the ins and outs of C# and ASP.Net. I have got to a point now where I think I know enough to be helpful to others.</p>\n\n<p>This blog is a chronicle of some things I wish people had sat me down and taught me about before I spent hours failing. I will add posts about things that I fight with and issues I face. I will also try to remember things that got me in the beginning and share those too.</p>\n\n<h3 id=\"aboutme\">About Me</h3>\n\n<p>I am a Chemical Engineer on paper, but my love affair with computers started way back round 1995. My dad had brought home a brand new 486. I don't recall the specs, but I do remember it being the envy of all my friends at the time. I have always had a strong compulsion to dismantle everything to see how it works; the myriad components and maze of green tracks held me in awe.</p>\n\n<p>I am now striving to master my craft and become a programming ninja. I have chosen to focus mainly on Microsoft technologies.</p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1404462265710,"created_by":1,"updated_at":1404541243042,"updated_by":1,"published_at":1404462265726,"published_by":1},{"id":5,"uuid":"4675b0a1-1a26-49d3-a5c8-c07498e902b2","title":"Ghost on Azure using Git","slug":"ghost-on-azure-using-git","markdown":"#Why not use the gallery template?\nI have recently setup this very blog on Azure and there are a few things that bit me when using the template. \n\nFirstly there is no .gitignore file. This means that all packages are version controlled. I spent many hours fighting with an issue where I had updated packages on my x64 laptop and committed an architecture specific sqlite3 package. This basically crashed node on the x86 Azure web site. \n\nSecondly the ghost.db file is version controlled, but the changes are never committed on the Azure side. This means that on every push you nuke all changes to your blog db, causing plentiful swearing. \n\nThis is my use case:\n\n* I want to use Git\n* I want to be able to edit my theme and Ghost files locally\n* I want to do all my blog posts using the remote interface (If I am not connected I will use notepad or anything I can scribble on!)\n\nI think I have come up with a reasonable story for this, but your input is welcome.\n\n## Things you will need\nBefore you start you need to grab or install the following. I am doing this on OSX, but this guide is perfect for Windows too.\n\n* [Azure](https://azure.microsoft.com) account (Trial is free and first few web sites are free!)\n* Latest [Ghost](https://ghost.org/download/) source\n* [Git](http://git-scm.com/download)\n* The files in the **src** folder of this [GitHub repo](https://github.com/chrisfraser/ghost-azure-template)\n* [node.js](http://nodejs.org/download/) (for editing Ghost locally)\n* Your favourite text editor\n\n## Skills you will need\nTo get this right you are going to need to have a basic knowledge of Git. If you need some help [here](http://git-scm.com/book/en/Getting-Started) is a free online book. \n\nFor this article to be any use to you, you probably need to know about [node.js](http://nodejs.org/api/) and of course [Ghost](https://ghost.org/about/).\n\n## The Plan\nThe best place to start is often the beginning, so we are going to kick this off by creating the Azure web site. Head over to the Azure [dashboard](https://manage.windowsazure.com) and login. In the bottom left there is a New button. Click it.\n\n![New](/content/images/2014/Jul/New-Azure-Site.png)\n\nGo ahead and *Quick Create* a new web site. You need to find a unique URL for it and select a hosting region. In theory the hosting region should be the closest to your intended audience, not you, but there are no hosts on my continent so I took the default. \n\nOnce your site has been created click on the name to get to the Quick Start page. \n\n![Your site has been created](/content/images/2014/Jul/Your-site-has-been-created.png)\n\nAt the bottom of the Quick Start page click on *Set up deployment from source control* and select Local Git repository.\n\n![Local Git repository](/content/images/2014/Jul/Local-Git-repository.png)\n\nOnce this is setup it will take you to the deployments page where you must *Reset your deployment credentials*. These will be the credentials used to Git to you repo. This password should be **strong** or you may as well go back to wordpress.\n\n![Reset deployment credentials](/content/images/2014/Jul/Reset-deployment-credentials.png)\n\nCopy the *git clone ...* bit from 2 and clone the repo to somewhere on your machine using the above **strong** password. The folder is going to be very empty at this point. \n\nThrow into this folder everything from the unzipped Ghost install folder. Add to this everything from the src folder in the *ghost-azure-template* repo. Your folder should now look something like this.\n\n![Ghost folder](/content/images/2014/Jul/Ghost-folder.png)\n\nNext copy and rename the *config.example.js* file to *config.js*. Now fire up the new config in your favourite editor. For now we are only worried about the production section. You need to change the *url* to `http://{yoursite}.azurewebsites.net` where the text `{yoursite}` is replaced by the name of your site. Also the *port* must be changed to `process.env.PORT`. Save the config. Mail and dev setting can be done later.\n\nYou are ready to run the following commands to commit and push your repo back up to Azure.\n\n```\ngit add --all\ngit commit -m \"Initial commit\"\ngit push origin master\n```\n\nYou may notice some interesting things going on in your git terminal. Once this has completed open up a browser and see if this sorcery has worked. You should see the following.\n\n![Win](/content/images/2014/Jul/Ghost-success.png)\n\nAzure is using [iisnode](https://github.com/tjanczuk/iisnode) behind the scenes to do a whole lot of magic, but here is a basic rundown of what is going on:\n1. You are pushing to your Git repo to Azure, which sits in a folder called repository, next to your wwwroot folder\n2. A deployment is triggered and a deployment script is generated\n3. KuduSync.NET deals with copying your files to wwwroot\n4. iisnode restores all your required packages and starts Ghost\n\n## Next level\nHere are a few quick steps to take next:\n\n#### Check out Kudu\nKudu is the magic behind this automated deploy, but can also do other things. Check out [this video](http://channel9.msdn.com/Shows/Azure-Friday/What-is-Kudu-Azure-Web-Sites-Deployment-with-David-Ebbo) and the [Github repo](https://github.com/projectkudu/kudu). Your Kudu instance can be found at `http://{yoursite}.scm.azurewebsites.net`.\n\n#### Get Ghost running locally for dev\nThe release download is good for getting up and running, but if you want to build from scratch, pulling the [Git repo](https://github.com/TryGhost/Ghost) is a good idea.\nFirst you need to sort out the development config. Change the *url* and *port* if need be. Then run the following at the root of the repo.\n```\nnpm install -g grunt-cli\nnpm install\ngrunt init\nnpm start\n```\n\n#### Add/make a theme \nUse this [guide](http://docs.ghost.org/themes/) or get one from the [marketplace](http://marketplace.ghost.org/)\n\n#### Sort out the mail\nGuide [here](http://docs.ghost.org/mail/)\n\n\nHappy blogging.\n","html":"<h1 id=\"whynotusethegallerytemplate\">Why not use the gallery template?</h1>\n\n<p>I have recently setup this very blog on Azure and there are a few things that bit me when using the template. </p>\n\n<p>Firstly there is no .gitignore file. This means that all packages are version controlled. I spent many hours fighting with an issue where I had updated packages on my x64 laptop and committed an architecture specific sqlite3 package. This basically crashed node on the x86 Azure web site. </p>\n\n<p>Secondly the ghost.db file is version controlled, but the changes are never committed on the Azure side. This means that on every push you nuke all changes to your blog db, causing plentiful swearing. </p>\n\n<p>This is my use case:</p>\n\n<ul>\n<li>I want to use Git</li>\n<li>I want to be able to edit my theme and Ghost files locally</li>\n<li>I want to do all my blog posts using the remote interface (If I am not connected I will use notepad or anything I can scribble on!)</li>\n</ul>\n\n<p>I think I have come up with a reasonable story for this, but your input is welcome.</p>\n\n<h2 id=\"thingsyouwillneed\">Things you will need</h2>\n\n<p>Before you start you need to grab or install the following. I am doing this on OSX, but this guide is perfect for Windows too.</p>\n\n<ul>\n<li><a href=\"https://azure.microsoft.com\">Azure</a> account (Trial is free and first few web sites are free!)</li>\n<li>Latest <a href=\"https://ghost.org/download/\">Ghost</a> source</li>\n<li><a href=\"http://git-scm.com/download\">Git</a></li>\n<li>The files in the <strong>src</strong> folder of this <a href=\"https://github.com/chrisfraser/ghost-azure-template\">GitHub repo</a></li>\n<li><a href=\"http://nodejs.org/download/\">node.js</a> (for editing Ghost locally)</li>\n<li>Your favourite text editor</li>\n</ul>\n\n<h2 id=\"skillsyouwillneed\">Skills you will need</h2>\n\n<p>To get this right you are going to need to have a basic knowledge of Git. If you need some help <a href=\"http://git-scm.com/book/en/Getting-Started\">here</a> is a free online book. </p>\n\n<p>For this article to be any use to you, you probably need to know about <a href=\"http://nodejs.org/api/\">node.js</a> and of course <a href=\"https://ghost.org/about/\">Ghost</a>.</p>\n\n<h2 id=\"theplan\">The Plan</h2>\n\n<p>The best place to start is often the beginning, so we are going to kick this off by creating the Azure web site. Head over to the Azure <a href=\"https://manage.windowsazure.com\">dashboard</a> and login. In the bottom left there is a New button. Click it.</p>\n\n<p><img src=\"/content/images/2014/Jul/New-Azure-Site.png\" alt=\"New\" /></p>\n\n<p>Go ahead and <em>Quick Create</em> a new web site. You need to find a unique URL for it and select a hosting region. In theory the hosting region should be the closest to your intended audience, not you, but there are no hosts on my continent so I took the default. </p>\n\n<p>Once your site has been created click on the name to get to the Quick Start page. </p>\n\n<p><img src=\"/content/images/2014/Jul/Your-site-has-been-created.png\" alt=\"Your site has been created\" /></p>\n\n<p>At the bottom of the Quick Start page click on <em>Set up deployment from source control</em> and select Local Git repository.</p>\n\n<p><img src=\"/content/images/2014/Jul/Local-Git-repository.png\" alt=\"Local Git repository\" /></p>\n\n<p>Once this is setup it will take you to the deployments page where you must <em>Reset your deployment credentials</em>. These will be the credentials used to Git to you repo. This password should be <strong>strong</strong> or you may as well go back to wordpress.</p>\n\n<p><img src=\"/content/images/2014/Jul/Reset-deployment-credentials.png\" alt=\"Reset deployment credentials\" /></p>\n\n<p>Copy the <em>git clone ...</em> bit from 2 and clone the repo to somewhere on your machine using the above <strong>strong</strong> password. The folder is going to be very empty at this point. </p>\n\n<p>Throw into this folder everything from the unzipped Ghost install folder. Add to this everything from the src folder in the <em>ghost-azure-template</em> repo. Your folder should now look something like this.</p>\n\n<p><img src=\"/content/images/2014/Jul/Ghost-folder.png\" alt=\"Ghost folder\" /></p>\n\n<p>Next copy and rename the <em>config.example.js</em> file to <em>config.js</em>. Now fire up the new config in your favourite editor. For now we are only worried about the production section. You need to change the <em>url</em> to <code>http://{yoursite}.azurewebsites.net</code> where the text <code>{yoursite}</code> is replaced by the name of your site. Also the <em>port</em> must be changed to <code>process.env.PORT</code>. Save the config. Mail and dev setting can be done later.</p>\n\n<p>You are ready to run the following commands to commit and push your repo back up to Azure.</p>\n\n<pre><code>git add --all  \ngit commit -m \"Initial commit\"  \ngit push origin master  \n</code></pre>\n\n<p>You may notice some interesting things going on in your git terminal. Once this has completed open up a browser and see if this sorcery has worked. You should see the following.</p>\n\n<p><img src=\"/content/images/2014/Jul/Ghost-success.png\" alt=\"Win\" /></p>\n\n<p>Azure is using <a href=\"https://github.com/tjanczuk/iisnode\">iisnode</a> behind the scenes to do a whole lot of magic, but here is a basic rundown of what is going on: <br />\n1. You are pushing to your Git repo to Azure, which sits in a folder called repository, next to your wwwroot folder <br />\n2. A deployment is triggered and a deployment script is generated <br />\n3. KuduSync.NET deals with copying your files to wwwroot <br />\n4. iisnode restores all your required packages and starts Ghost</p>\n\n<h2 id=\"nextlevel\">Next level</h2>\n\n<p>Here are a few quick steps to take next:</p>\n\n<h4 id=\"checkoutkudu\">Check out Kudu</h4>\n\n<p>Kudu is the magic behind this automated deploy, but can also do other things. Check out <a href=\"http://channel9.msdn.com/Shows/Azure-Friday/What-is-Kudu-Azure-Web-Sites-Deployment-with-David-Ebbo\">this video</a> and the <a href=\"https://github.com/projectkudu/kudu\">Github repo</a>. Your Kudu instance can be found at <code>http://{yoursite}.scm.azurewebsites.net</code>.</p>\n\n<h4 id=\"getghostrunninglocallyfordev\">Get Ghost running locally for dev</h4>\n\n<p>The release download is good for getting up and running, but if you want to build from scratch, pulling the <a href=\"https://github.com/TryGhost/Ghost\">Git repo</a> is a good idea. <br />\nFirst you need to sort out the development config. Change the <em>url</em> and <em>port</em> if need be. Then run the following at the root of the repo.  </p>\n\n<pre><code>npm install -g grunt-cli  \nnpm install  \ngrunt init  \nnpm start  \n</code></pre>\n\n<h4 id=\"addmakeatheme\">Add/make a theme</h4>\n\n<p>Use this <a href=\"http://docs.ghost.org/themes/\">guide</a> or get one from the <a href=\"http://marketplace.ghost.org/\">marketplace</a></p>\n\n<h4 id=\"sortoutthemail\">Sort out the mail</h4>\n\n<p>Guide <a href=\"http://docs.ghost.org/mail/\">here</a></p>\n\n<p>Happy blogging.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1405974940922,"created_by":1,"updated_at":1406063190706,"updated_by":1,"published_at":1405987001221,"published_by":1},{"id":7,"uuid":"ac20b8b6-ce25-4aca-9a3d-0eb0758be8be","title":"Azure WebJob to backup your Ghost.db","slug":"azure-webjob-to-backup-your-ghost-db","markdown":"http://azure.microsoft.com/blog/2014/04/28/simple-web-site-backup-retention-policy-with-webjobs/","html":"<p><a href='http://azure.microsoft.com/blog/2014/04/28/simple-web-site-backup-retention-policy-with-webjobs/'>http://azure.microsoft.com/blog/2014/04/28/simple-web-site-backup-retention-policy-with-webjobs/</a></p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1406297330784,"created_by":1,"updated_at":1406297330784,"updated_by":1,"published_at":null,"published_by":null}],"users":[{"id":1,"uuid":"54c7da36-5abf-4156-ae9a-1174e2839cb8","name":"Chris Fraser","slug":"chris-fraser","password":"$2a$10$T98Ph6KQSwqq1wgq41SMqeDxYCzyyj4ykIlJ76rD6zKdww6ixtX9.","email":"mrfunnel@gmail.com","image":"//www.gravatar.com/avatar/db32341c684fcc768b7ab4353f8c218b?d=404","cover":null,"bio":"I write code and sometimes wear pants.","website":"www.chrisfraser.co.za","location":"Durban, South Africa","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":null,"created_at":1403119637816,"created_by":1,"updated_at":1441642871711,"updated_by":1}],"roles":[{"id":1,"uuid":"21273b73-182e-426f-96ef-b379dd24dcd3","name":"Administrator","description":"Administrators","created_at":1390837998920,"created_by":1,"updated_at":1390837998920,"updated_by":1},{"id":2,"uuid":"29f658ee-5cde-45f2-b37e-ecf0d5307419","name":"Editor","description":"Editors","created_at":1390837998939,"created_by":1,"updated_at":1390837998939,"updated_by":1},{"id":3,"uuid":"d79fd6c8-e84f-4af3-8d7a-42e2a38a94e8","name":"Author","description":"Authors","created_at":1390837998955,"created_by":1,"updated_at":1390837998955,"updated_by":1}],"roles_users":[{"id":1,"role_id":1,"user_id":1}],"permissions":[{"id":1,"uuid":"52bd88ee-385e-4cb4-bb46-a71543929c04","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1390837998969,"created_by":1,"updated_at":1390837998969,"updated_by":1},{"id":2,"uuid":"5d00dde5-1c06-47f6-9933-96ea9e735d76","name":"Remove posts","object_type":"post","action_type":"remove","object_id":null,"created_at":1390837998984,"created_by":1,"updated_at":1390837998984,"updated_by":1},{"id":3,"uuid":"7b674127-3577-45c4-8bbd-fae6314a5139","name":"Create posts","object_type":"post","action_type":"create","object_id":null,"created_at":1390837998998,"created_by":1,"updated_at":1390837998998,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3}],"sessions":[{"id":"wfIiwD7IOKKCejLodOt8CIHz","expires":1441687545679,"sess":"{\"cookie\":{\"originalMaxAge\":43200000,\"expires\":\"2015-09-08T04:45:45.679Z\",\"httpOnly\":true,\"path\":\"/ghost/\"},\"user\":1,\"_csrfSecret\":\"gyXun1JQYxAWRE8h1Qr3brG8\"}"}],"settings":[{"id":1,"uuid":"79b72125-aa4e-4391-8dc2-163e65821113","key":"databaseVersion","value":"002","type":"core","created_at":1390837999017,"created_by":1,"updated_at":1390837999017,"updated_by":1},{"id":2,"uuid":"a9b0479d-0947-4931-b144-b83f452d7e5e","key":"dbHash","value":"2601dc08-5488-45ac-b123-2912c082141c","type":"core","created_at":1390837999018,"created_by":1,"updated_at":1390837999292,"updated_by":1},{"id":3,"uuid":"de25ef88-d6ca-40bb-9921-889c743b1d86","key":"nextUpdateCheck","value":"1441729273","type":"core","created_at":1390837999018,"created_by":1,"updated_at":1441642874160,"updated_by":1},{"id":4,"uuid":"e39a3f56-f38b-45ef-ab1d-d61c94b99a2d","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1390837999018,"created_by":1,"updated_at":1441642874160,"updated_by":1},{"id":5,"uuid":"f9b6fd8c-6c86-45c8-804e-edb737d10dfd","key":"title","value":"20/20 Hindsight","type":"blog","created_at":1390837999018,"created_by":1,"updated_at":1406293353230,"updated_by":1},{"id":6,"uuid":"f2f1e3d7-c1be-45af-a994-075acc76c4fe","key":"description","value":"Things I wish someone had told me.","type":"blog","created_at":1390837999018,"created_by":1,"updated_at":1406293353232,"updated_by":1},{"id":7,"uuid":"09f31d70-d24e-4591-aad6-ce0f1735d469","key":"email","value":"mrfunnel@gmail.com","type":"blog","created_at":1390837999019,"created_by":1,"updated_at":1406293353234,"updated_by":1},{"id":8,"uuid":"f0055fe3-441b-48e3-9354-f4e983754245","key":"logo","value":"/content/images/2014/Jul/Logo1.png","type":"blog","created_at":1390837999019,"created_by":1,"updated_at":1406293353237,"updated_by":1},{"id":9,"uuid":"65003ad3-1f69-4d8a-b95b-a40c2f960956","key":"cover","value":"","type":"blog","created_at":1390837999021,"created_by":1,"updated_at":1406293353239,"updated_by":1},{"id":10,"uuid":"1a62995c-f7d7-4032-a581-526c3ff14559","key":"defaultLang","value":"en_US","type":"blog","created_at":1390837999021,"created_by":1,"updated_at":1406293353241,"updated_by":1},{"id":11,"uuid":"7e847303-03b3-42d7-b60f-8a7f1bac69d5","key":"postsPerPage","value":"6","type":"blog","created_at":1390837999021,"created_by":1,"updated_at":1406293353242,"updated_by":1},{"id":12,"uuid":"4bd0515b-4f9e-4edd-8f1e-e13472c7b6e6","key":"forceI18n","value":"true","type":"blog","created_at":1390837999021,"created_by":1,"updated_at":1406293353244,"updated_by":1},{"id":13,"uuid":"4f9a37aa-edd1-4c2b-b60c-9aa2fca55cf3","key":"permalinks","value":"/:slug/","type":"blog","created_at":1390837999021,"created_by":1,"updated_at":1406293353245,"updated_by":1},{"id":14,"uuid":"e0db53f4-0a7c-4b5f-be78-4ec2aefc6c8f","key":"activeTheme","value":"gwaio","type":"theme","created_at":1390837999022,"created_by":1,"updated_at":1406293353246,"updated_by":1},{"id":15,"uuid":"ccaa51a0-1565-4175-9dcb-f7e77451a231","key":"activePlugins","value":"[]","type":"plugin","created_at":1390837999022,"created_by":1,"updated_at":1390837999022,"updated_by":1},{"id":16,"uuid":"1dab2080-6a77-4f06-a8e1-de3d4527e5fa","key":"installedPlugins","value":"[]","type":"plugin","created_at":1390837999022,"created_by":1,"updated_at":1403119425247,"updated_by":1},{"id":17,"uuid":"b57c6747-acdd-45f9-b7dd-0439e44f2c02","key":"activeApps","value":"[]","type":"app","created_at":1404412113682,"created_by":1,"updated_at":1406293353247,"updated_by":1},{"id":18,"uuid":"3ca4cc65-8de9-4628-a1fe-b6c0401aa974","key":"installedApps","value":"[]","type":"app","created_at":1404412113683,"created_by":1,"updated_at":1440715950004,"updated_by":1}],"tags":[{"id":1,"uuid":"2f82daed-b4be-4a1f-857f-0288091086bc","name":"Getting Started","slug":"getting-started","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1390837998901,"created_by":1,"updated_at":1390837998901,"updated_by":1},{"id":2,"uuid":"831f3a1e-31dc-4522-a37a-a03c78ab84c9","name":"hg mercurial .hgignore","slug":"hg-mercurial-hgignore","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1404456760020,"created_by":1,"updated_at":1404456760020,"updated_by":1},{"id":3,"uuid":"99558101-7113-442b-a521-d5e552e7abb0","name":"hg","slug":"hg","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1404635425271,"created_by":1,"updated_at":1404635425271,"updated_by":1},{"id":4,"uuid":"437d67f3-136f-4ee5-9dd1-b65d8b565e8b","name":"mercurial","slug":"mercurial","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1404635425271,"created_by":1,"updated_at":1404635425271,"updated_by":1},{"id":5,"uuid":"a22a3042-9450-462b-9065-d33348ffc23f","name":".hgignore","slug":"-hgignore","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1404635425271,"created_by":1,"updated_at":1404635425271,"updated_by":1},{"id":6,"uuid":"d49b72f0-a45a-44fc-ad26-6c5dc341fdac","name":"Azure","slug":"azure","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1406031573851,"created_by":1,"updated_at":1406031573851,"updated_by":1},{"id":7,"uuid":"47940e23-a659-4188-8ef2-5d7fd8ddb008","name":"Ghost","slug":"ghost-tag","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1406031573851,"created_by":1,"updated_at":1406031573851,"updated_by":1},{"id":8,"uuid":"3a97dc17-900c-4aad-876b-13b2af2ac58b","name":"Git","slug":"git","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1406031573851,"created_by":1,"updated_at":1406031573851,"updated_by":1},{"id":9,"uuid":"35b45ceb-7f24-476f-a750-f972d07c5922","name":"C#","slug":"c","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1406644073379,"created_by":1,"updated_at":1406644073379,"updated_by":1},{"id":10,"uuid":"80023e77-0892-4cb1-a6be-02db7c18e58f","name":"async","slug":"async","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1406644073379,"created_by":1,"updated_at":1406644073379,"updated_by":1},{"id":11,"uuid":"9aace946-d316-41dd-8971-a8382a074722","name":".Net 4.5","slug":"-net-4-5","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1406644073379,"created_by":1,"updated_at":1406644073379,"updated_by":1},{"id":12,"uuid":"16ffc3b5-c027-4683-a611-fdb4f0b1b86d","name":"C# 5.0","slug":"c-5-0","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1406644073379,"created_by":1,"updated_at":1406644073379,"updated_by":1},{"id":13,"uuid":"ee94584e-21f0-4eb4-a32b-1c114308cac3","name":".NET 4.5","slug":"-net-4-5-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1407788182437,"created_by":1,"updated_at":1407788182437,"updated_by":1},{"id":14,"uuid":"7472f3a0-10d2-419c-bda0-f1c072faf68a","name":"await","slug":"await","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1407788295831,"created_by":1,"updated_at":1407788295831,"updated_by":1}],"posts_tags":[{"id":1,"post_id":1,"tag_id":1},{"id":3,"post_id":3,"tag_id":3},{"id":4,"post_id":3,"tag_id":4},{"id":5,"post_id":3,"tag_id":5},{"id":6,"post_id":5,"tag_id":6},{"id":7,"post_id":5,"tag_id":7},{"id":8,"post_id":5,"tag_id":8},{"id":9,"post_id":2,"tag_id":9},{"id":10,"post_id":2,"tag_id":10},{"id":12,"post_id":2,"tag_id":12},{"id":13,"post_id":2,"tag_id":13},{"id":14,"post_id":2,"tag_id":14}]}}